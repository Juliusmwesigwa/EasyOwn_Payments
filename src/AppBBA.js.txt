import React from 'react';
import { closePaymentModal, useFlutterwave } from 'flutterwave-react-v3';
import { Flex, Input, Space, Typography , Form, Row, Select, Button as AntButton, Result} from 'antd';
import { getCustomerPaymentDetails } from './utils/ApiUtils';
import { BBA_FLW_PUBLIC_KEY, FLW_PUBLIC_KEY } from './constants';
const { Text, Link } = Typography;

const FormItem=Form.Item;



export default function App() {
  const [form] = Form.useForm();
  
  //const { getFieldDecorator } = form.getFieldError();

    const [customerDetails, setcustomerDetails] = React.useState({
      payg: "",
    serialnumber: "",
    customeraccount: "",
    amount: 0,
    customername: "",
    phonenumber: ""});
    const [imeiDetails, setImeiDetails] = React.useState({});
    const [dealDetails, setDealDetails] = React.useState({});
    const [minPayment, setMinPayment] = React.useState(0);
    const [downPayment, setDownPayment] = React.useState(0);
    const [payingNumber, setPayingNumber] = React.useState("");
    const [showPaymentModal, setShowPaymentModal] = React.useState(false);
    const [cancelled, setCancelled] = React.useState(false);
    const [amountToPay, setAmountToPay] = React.useState("0");
    const [payg, setPayg] =  React.useState("");
    const [seeDetails, setSeeDetails] = React.useState(false);


    const styles= {
      container: {
        //flex: 1,
        backgroundColor: '#F2F4F4',
        alignItems: 'center',
        justifyContent: 'center',
       height:'100%',
       width:'100%',
       
      },
      textInput:{
        backgroundColor: "white", marginBottom: 9, marginTop: 1, width:'70%', height:40
      },
      welcome: { margin: 12, fontSize: 20, fontWeight: "500", alignSelf: "center", color:"black" },
      submitApplicationButton:{
        backgroundColor:"#388E3C",
        width: '100%',
        padding: 8.5,
        borderRadius: 5,
        alignSelf:'center',
        alignItems: 'center',
        marginVertical:12,
        height:50
      },
      paymentButton:{
        backgroundColor:'yellow',
        height: 50
      },
      inputWrapper:{
        width:'80%', 
        alignItems:'center', 
        marginTop: '1%',
        backgroundColor:'white',
        padding: '2%',
        //width:'60%'
        marginBottom:'1%',
        borderRadius:8
      },
      antdInput:{
        borderRadius:4, borderWidth:2, marginTop:-4, color:'black'
      }
    }
  

  const config = {
    public_key: BBA_FLW_PUBLIC_KEY,
    tx_ref: payg+Date.now().toString(),
    amount: amountToPay,
    currency: 'UGX',
    //payment_options: 'mobilemoneyuganda',
    customer: {
      email: `${customerDetails.customeraccount}@bballiance.africa`,
      phone_number: payingNumber,
      name: customerDetails.customername,
    },
    customizations: {
      title: 'BBA Payments',
      logo: 'https://i.imgur.com/yDCyp68.png',
      description: 'BBA Device Payment',
      
    },
    redirect_url:"https://pay.bballiance.africa",
    meta:{
      payg: payg
    }
  };

  const handleFlutterPayment = useFlutterwave(config);
const [isLoading, setIsLoading]=React.useState(false)
  const fwConfig = {
    ...config,
    text: 'Pay with Flutterwave!',
    callback: (response) => {
       console.log(response);
      closePaymentModal() // this will close the modal programmatically
    },
    onClose: () => {},
  };

  const processPayment =(event)=>{
    event.preventDefault();
    {
      setIsLoading(true)
      handleFlutterPayment({
        callback: (response) => {
          setIsLoading(false)
           console.log(response);
            closePaymentModal() // this will close the modal programmatically
        },
        onClose: () => {setIsLoading(false)},
      });
    }
  }


  const { Option } = Select;

const layout = {
  labelCol: { span: 8 },
  wrapperCol: { span: 16 },
};

const tailLayout = {
  wrapperCol: { offset: 8, span: 16 },
};




  const onGenderChange = (value) => {
    switch (value) {
      case 'airtel':
        form.setFieldsValue({ note: 'Hi AIRTEL' });
        break;
      case 'mtn':
        form.setFieldsValue({ note2: 'Hi MTN' });
        break;
      default:
    }
  };

  const onFinish = (values) => {
    processPayment()
  };

  const onReset = () => {
    form.resetFields();
  };

  
  const getCustomerDetails=()=>{
   setIsLoading(true)
    const toPayLoad={
      payg: payg
    }
   // 
   
    getCustomerPaymentDetails(toPayLoad)
    .then(response=>{
     
      setSeeDetails(true)
      setIsLoading(false)
      
      setcustomerDetails(response[0])
      setPayingNumber(response[0].phonenumber)
      setAmountToPay(response[0].amount)

      form.setFieldsValue({
        PayingNumber: response[0].phonenumber, 
        Amount: response[0].amount,
        CustomerNumber: response[0].customeraccount
      })
    }).catch(error=>{
      //alert(JSON.stringify(error))
      setSeeDetails(false)
      setIsLoading(false)
      console.log(error)
    })
  }

  const textOnchange=(e)=>{
    let value = e.target.value


    form.setFieldsValue({[e.target.name]: value})
//alert(value)

  }
  

  const queryParameters = new URLSearchParams(window.location.search)
  const status = queryParameters.get("status")
  const tx_ref = queryParameters.get("tx_ref")
  const tr_id=queryParameters.get("transaction_id")

  const clearUrlData=()=>{
    queryParameters.delete('status')
    queryParameters.delete('tx_ref')
    queryParameters.delete('transaction_id')
    //window.history.pushState(0, "", '/')
    window.location.replace('/')
  }
 // const handleFlutterPayment = useFlutterwave(config);
  return (
    <>
   

    <Row style={styles.container}>


    
                  <div style={styles.inputWrapper}>
                  <div style={{ borderRadius:8, padding:4, marginBottom:12, marginTop:8, alignItems:'center'}}>
                      <center><Text style={{ alignSelf: 'center', fontSize:25, fontWeight:'500', color:"#263238", marginTop:-8}}>
                        BBA Payment</Text></center>  
                    </div>
                  {status !=null && status.toString().length>0?
          <Result
            status="success"
            title="Your Payment was Successful!"
            subTitle={<Text copyable style={{ fontSize: 16, fontWeight: '500' }}>
              Transaction Reference is: {tx_ref} and transaction Id is: {tr_id}</Text>}
            extra={[
              <AntButton htmlType="button" type="primary"
                style={{}} onClick={() =>clearUrlData()}>
                Go back
              </AntButton>,
            ]}
          />:null}
                  
{/* Form */} 
                    <div style={{width: '90%'}}>
            {seeDetails == true && status !=null && status.toString().length<1 ?
              <div style={{ alignItems: 'center' }}>
                <Text strong>Hello, {customerDetails.customername}</Text>
                <Text strong>Your Phone is, {customerDetails.dealname}</Text>
              </div>
              : null}    
            <Form layout='vertical' form={form} name="control-hooks" onFinish={onFinish} 
            
            style={{}}>
              {status ==null &&
              <Form.Item name="payg" label="PAYG NUMBER" rules={[{ required: true }]}>
                <Input style={styles.antdInput} value={payg} name='payg' onChange={(e) => setPayg(e.target.value)}
                />
              </Form.Item>}
              {seeDetails ==true &&
              <>
              <Form.Item name="CustomerNumber" label="Customer Number" rules={[{ required: false }]}>
                <Input size='large' style={styles.antdInput} 
                value={customerDetails.customeraccount} status={customerDetails.customeraccount!=""?'success':'error'} disabled />
              </Form.Item>
              <Form.Item name="PayingNumber" label="Paying Number" rules={[{ required: true }]}>
                <Input size='large' style={styles.antdInput} value={payingNumber.toString()} type='text'
                //onChange={(e) => setPayingNumber(e.target.value)}
                status={payingNumber!=""?'success':'error'}
                onChange={(e) => setPayingNumber(e.target.value)}
                />
              </Form.Item>
              <Form.Item name="Amount" label="Amount" rules={[{ required: true }]}>
                <Input size='large' style={styles.antdInput} onChange={(e) => setAmountToPay(e.target.value)} 
                value={amountToPay.toString()} 
                />
              </Form.Item>
              <center>
                <Form.Item >
                  <Space>
                    <AntButton type="primary" htmlType="submit"
                      loading={isLoading}
                      disabled={isLoading ? true : false}
                       onClick={(e) => processPayment(e)}
                      style={{ backgroundColor: isLoading ? '#AED6F1' : '#2471A3', color: 'white' }}
                    >
                      PAY NOW
                    </AntButton>
                    
                    <AntButton htmlType="button" onClick={onReset}>
                      Reset
                    </AntButton>
                  </Space>
                </Form.Item>
                
             
              </center>
              </> }
{!seeDetails &&  status ==null ?
              <center>
                <Form.Item >
                  <Space>
                    <AntButton type="primary" 
                      loading={isLoading}
                      disabled={isLoading ? true : false}
                      value={payg}
                       onClick={() => getCustomerDetails()}
                      style={{ backgroundColor: isLoading ? '#AED6F1' : '#2471A3', color: 'white' }}
                    >
                      REQUEST DETAILS
                    </AntButton>
                  </Space>
                </Form.Item>
                
             
              </center>:null}
            </Form>
         

                    </div>

                   

                   
         
                   
                
               
                
                    
             
                    </div>  
                   
           
    
    </Row>
    </>
  );
}


